

globals:
  - id: api_status_connected_clients
    type: int
    restore_value: no
    initial_value: '0'

  - id: api_status_openhab_connected
    type: int
    restore_value: no
    initial_value: '0'


  - id: wifi_status_connected
    type: bool
    initial_value: "false"
    restore_value: no


  - id: ota_in_progress
    type: bool
    initial_value: "false"
    restore_value: no


  - id: status_has_warnings
    type: bool
    restore_value: no
    initial_value: "true"

  - id: status_ui_blink_state
    type: bool
    restore_value: no
    initial_value: "true"


interval:
  - interval: 500ms
    then:
      - lambda: |-
          id(status_ui_blink_state) = !id(status_ui_blink_state);
      - if:
          condition:
            lambda: 'return id(status_has_warnings);'
          then:
            - script.execute: script_status_update

script:
  - id: script_status_update
    then:
      - lambda: |-
          id(status_has_warnings) = 
            !id(wifi_status_connected) || 
            !(id(api_status_openhab_connected) > 0) || 
            id(ota_in_progress);

      - lambda: |-
            script_display_status_header_update->execute(); // needs kind of ifdef for script presense

      - lambda: |-
          script_ui_led_status_update->execute();


ota:
  on_begin:
    then:
      - logger.log: "OTA begin"
      - lambda: 'id(ota_in_progress) = true;'
      - script.execute: script_status_update
#      - delay: 1100ms

  on_end:
    then:
      - logger.log: "OTA end"
      - lambda: 'id(ota_in_progress) = false;'
      - script.execute: script_status_update
#      - delay: 1100ms


wifi:
  on_connect:
    - lambda: 'id(wifi_status_connected) = true;'
    - script.execute: script_status_update

  on_disconnect:
    - lambda: 'id(wifi_status_connected) = false;'
    - script.execute: script_status_update


api:
  on_client_connected:
    - lambda: |-
        id(api_status_connected_clients) += 1;
        std::string cli_lower;
        std::for_each(client_info.begin(), client_info.end(), 
                    [&](const char& c) {
                      cli_lower.push_back(std::tolower(c));
                    }
        );
        if(cli_lower.find("openhab") != std::string::npos) {
          id(api_status_openhab_connected) += 1;
        }
        
        ESP_LOGD("client", "client connected: clients %d [oh: %d], %s", 
              id(api_status_connected_clients), 
              id(api_status_openhab_connected), 
              client_info.c_str()
        );   

    - script.execute: script_status_update


  on_client_disconnected:
    - lambda: |-
        if(id(api_status_connected_clients) > 0) {
          id(api_status_connected_clients) -= 1;
        }
        std::string cli_lower;
        std::for_each(client_info.begin(), client_info.end(), 
                    [&](const char& c) {
                      cli_lower.push_back(std::tolower(c));
                    }
        );
        if(cli_lower.find("openhab") != std::string::npos  && id(api_status_openhab_connected) > 0) {
          id(api_status_openhab_connected) -= 1;
        }
        
        ESP_LOGD("client", "client DISconnected: clients %d [oh: %d], %s", 
              id(api_status_connected_clients), 
              id(api_status_openhab_connected), 
              client_info.c_str()
        );   

    - script.execute: script_status_update
